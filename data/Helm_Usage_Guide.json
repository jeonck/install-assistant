{
    "title": "Helm 도구 활용 매뉴얼",
    "description": "Kubernetes용 패키지 관리자인 Helm의 주요 개념, 설치, 기본 사용법 및 이점을 설명하는 가이드입니다.",
    "steps": [
        {
            "text": "Helm이란?",
            "description": "Helm은 Kubernetes용 오픈 소스 패키지 관리자로, Kubernetes 클러스터에 애플리케이션을 배포, 확장 및 관리하는 과정을 간소화합니다. Kubernetes 리소스를 수동 YAML 파일로 정의하는 복잡성을 추상화하기 위해 Helm 차트(사전 구성된 템플릿)를 사용합니다."
        },
        {
            "text": "주요 개념",
            "description": "Helm Chart: Kubernetes 클러스터 내에서 애플리케이션, 도구 또는 서비스를 실행하는 데 필요한 모든 리소스 정의를 포함하는 패키지입니다. Helm Repository: 차트를 수집하고 공유할 수 있는 장소입니다. Helm Release: Kubernetes 클러스터에서 실행 중인 차트의 인스턴스입니다."
        },
        {
            "text": "Helm 아키텍처",
            "description": "Helm 3은 보안 강화 및 작업 간소화를 위해 Helm 2에 있던 Tiller 서버 측 구성 요소를 제거하고 클라이언트 측 CLI 도구로만 작동합니다. Helm 클라이언트는 차트 작업을 위해 사용되며, Helm 라이브러리는 Kubernetes API와 통신하여 애플리케이션을 배포하고 관리합니다."
        },
        {
            "text": "전제 조건",
            "description": "Helm을 사용하기 전에 다음이 필요합니다: 실행 중인 Kubernetes 클러스터, kubectl이 설치 및 구성되어 클러스터와 통신할 수 있어야 합니다."
        },
        {
            "text": "Helm 설치",
            "description": "Helm은 바이너리 릴리스를 다운로드하거나 설치 스크립트를 사용하여 설치할 수 있습니다. macOS의 경우 `brew install helm`이 일반적인 방법이며, Linux의 경우 공식 GitHub 저장소의 스크립트를 사용할 수 있습니다. 설치 후 `helm version`을 실행하여 확인합니다.",
            "command": "brew install helm # macOS 예시"
        },
        {
            "text": "Helm Repository 추가",
            "description": "차트에 액세스하려면 먼저 저장소를 추가해야 합니다. 예를 들어 Bitnami 저장소를 추가하려면 다음을 수행합니다.",
            "command": "helm repo add bitnami https://charts.bitnami.com/bitnami && helm repo update"
        },
        {
            "text": "에어갭 환경을 위한 차트 다운로드 (.tgz)",
            "description": "인터넷에 연결되지 않은 에어갭 환경에서 Helm 차트를 사용하려면, 인터넷에 연결된 환경에서 차트를 .tgz 파일로 다운로드해야 합니다. `helm pull` 명령을 사용하여 차트를 로컬에 저장할 수 있습니다. `--untar` 플래그를 사용하면 차트의 압축을 해제하여 내용을 확인할 수 있습니다.",
            "command": "helm pull bitnami/mysql --version 9.2.1 --destination ./charts && helm pull bitnami/nginx --destination ./charts --untar"
        },
        {
            "text": "차트 검색",
            "description": "추가된 저장소 또는 Artifact Hub에서 차트를 검색할 수 있습니다.",
            "command": "helm search hub wordpress # Artifact Hub 검색 예시"
        },
        {
            "text": "차트 설치",
            "description": "차트를 설치하려면 `helm install` 다음에 릴리스 이름과 차트 이름을 사용합니다. 예를 들어 MySQL 차트를 설치하려면 다음을 수행합니다.",
            "command": "helm install my-mysql bitnami/mysql"
        },
        {
            "text": "차트 사용자 정의",
            "description": "Helm은 `values.yaml` 파일을 사용하여 차트를 사용자 정의할 수 있도록 합니다. 자체 `values.yaml` 파일을 제공하거나 설치 또는 업그레이드 중에 `--set` 플래그를 사용하여 기본 설정을 재정의할 수 있습니다.",
            "code": "helm install my-release my-chart -f my-values.yaml\nhelm upgrade my-release my-chart --set image.tag=2.0"
        },
        {
            "text": "릴리스 업그레이드",
            "description": "차트의 최신 버전 또는 수정된 값으로 기존 릴리스를 업데이트하려면 다음을 수행합니다.",
            "command": "helm upgrade my-release bitnami/mysql"
        },
        {
            "text": "릴리스 롤백",
            "description": "업그레이드로 인해 문제가 발생하는 경우 이전 안정적인 상태로 쉽게 롤백할 수 있습니다.",
            "command": "helm rollback my-release [REVISION_NUMBER]"
        },
        {
            "text": "릴리스 나열",
            "description": "클러스터에 설치된 모든 릴리스를 보려면 다음을 수행합니다.",
            "command": "helm list"
        },
        {
            "text": "릴리스 상태 확인",
            "description": "특정 릴리스의 상태를 확인하려면 다음을 수행합니다.",
            "command": "helm status my-mysql"
        },
        {
            "text": "릴리스 제거",
            "description": "클러스터에서 배포된 릴리스를 제거하려면 다음을 수행합니다.",
            "command": "helm uninstall my-release"
        },
        {
            "text": "자체 차트 생성",
            "description": "자체 사용자 정의 차트를 생성하기 위해 상용구 차트 구조를 생성할 수 있습니다.",
            "command": "helm create my-chart"
        },
        {
            "text": "Helm의 이점",
            "description": "Helm은 Kubernetes에서 애플리케이션을 관리하는 데 여러 가지 이점을 제공합니다: 간소화된 배포, 일관성 및 표준화, 버전 관리 및 롤백, 구성 관리, CI/CD 통합."
        },
        {
            "text": "Helm 차트 디버깅",
            "description": "Helm 차트 및 템플릿 디버깅에 도움이 되는 몇 가지 명령이 있습니다: `helm lint`, `helm get values [RELEASE]`, `helm install --dry-run --debug`, `helm get manifest [RELEASE]`, `helm diff`."
        }
    ]
}