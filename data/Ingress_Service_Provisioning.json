{
    "title": "Ingress.yaml 기반 서비스 제공 절차서",
    "description": "Kubernetes Ingress를 사용하여 클러스터 내 서비스에 대한 외부 접근을 관리하고 트래픽을 라우팅하는 절차를 설명합니다.",
    "steps": [
        {
            "text": "Ingress란?",
            "description": "Kubernetes Ingress는 Kubernetes 클러스터 내 서비스에 대한 외부 접근(일반적으로 HTTP 및 HTTPS 트래픽)을 관리하는 API 객체입니다. 호스트 이름 및 URL 경로와 같은 다양한 기준에 따라 트래픽을 다른 서비스로 라우팅할 수 있도록 하는 추상화 계층 역할을 합니다."
        },
        {
            "text": "전제 조건",
            "description": "Ingress 리소스를 정의하기 전에 Ingress Controller가 Kubernetes 클러스터에 배포되어 있어야 합니다. Ingress Controller는 로드 밸런서(예: NGINX, HAProxy 또는 클라우드 공급자별 로드 밸런서)를 구성하여 Ingress 규칙을 이행하는 역할을 합니다."
        },
        {
            "text": "기본 Ingress 예시",
            "description": "이 예시는 `example.com`에 대한 모든 트래픽을 `my-service`라는 서비스의 80번 포트로 라우팅합니다. `ingressClassName`은 Kubernetes 1.19+에서 권장됩니다.",
            "code": "apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: basic-ingress\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: my-service\n            port:\n              number: 80"
        },
        {
            "text": "TLS 구성이 포함된 Ingress",
            "description": "HTTPS로 Ingress를 보호하려면 TLS를 구성해야 합니다. 여기에는 TLS 인증서와 개인 키를 포함하는 Kubernetes Secret을 생성한 다음 Ingress 리소스에서 이 Secret을 참조하는 것이 포함됩니다. 먼저 TLS Secret을 생성합니다 (tls.crt 및 tls.key 파일이 있다고 가정).",
            "command": "kubectl create secret tls my-tls-secret --cert=tls.crt --key=tls.key",
            "code": "apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: tls-ingress\nspec:\n  ingressClassName: nginx\n  tls:\n  - hosts:\n    - secure.example.com\n    secretName: my-tls-secret\n  rules:\n  - host: secure.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: my-secure-service\n            port:\n              number: 443"
        },
        {
            "text": "다중 호스트 및 경로가 포함된 Ingress",
            "description": "단일 Ingress 리소스를 사용하여 여러 호스트 이름과 해당 호스트 이름 내의 다른 경로에 대한 트래픽을 라우팅할 수 있습니다.",
            "code": "apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: multi-host-path-ingress\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: app1.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: app1-service\n            port:\n              number: 80\n  - host: app2.example.com\n    http:\n      paths:\n      - path: /api\n        pathType: Prefix\n        backend:\n          service:\n            name: app2-api-service\n            port:\n              number: 8080\n      - path: /web\n        pathType: Prefix\n        backend:\n          service:\n            name: app2-web-service\n            port:\n              number: 80"
        },
        {
            "text": "중요 고려 사항",
            "description": "Ingress Controller 설치: Ingress 리소스가 작동하려면 Ingress Controller(예: NGINX Ingress Controller)가 클러스터에 설치되어 있어야 합니다. 서비스 노출: Ingress는 Kubernetes 서비스로 트래픽을 라우팅하며, 서비스는 애플리케이션 Pod로 트래픽을 전달합니다. DNS 구성: 외부 접근을 위해서는 선택한 호스트 이름이 Ingress Controller의 외부 IP 주소를 가리키도록 DNS 레코드를 구성해야 합니다."
        }
    ]
}