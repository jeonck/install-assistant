{
    "title": "KVM 기반 서버에 Kubernetes 설치 절차서",
    "description": "KVM 기반 서버에 Kubernetes 클러스터를 설치하는 일반화된 절차서입니다. 마스터 및 워커 노드에 적용됩니다.",
    "steps": [
        {
            "text": "기본 패키지 업데이트 (master, worker)",
            "description": "모든 노드에서 시스템 패키지를 최신 상태로 업데이트하고 필요한 도구를 설치합니다.",
            "command": "sudo apt update && sudo apt upgrade -y\nsudo apt install -y curl apt-transport-https"
        },
        {
            "text": "swap memory 비활성화 (master, worker)",
            "description": "Kubernetes는 swap 메모리가 비활성화된 상태에서 가장 잘 작동합니다. 현재 세션에서 swap을 비활성화하고 부팅 시 다시 활성화되지 않도록 설정합니다.",
            "command": "sudo swapoff -a\nsudo sed -i '/swap/d' /etc/fstab\nfree -h"
        },
        {
            "text": "containerd 설치 및 설정 (master, worker)",
            "description": "Kubernetes의 컨테이너 런타임으로 containerd를 설치하고, SystemdCgroup을 활성화하도록 설정 파일을 수정합니다. 서비스 재시작 및 자동 시작 설정을 포함합니다.",
            "command": "sudo apt install -y containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\nsudo systemctl restart containerd\nsudo systemctl enable containerd\nsudo systemctl status containerd.service"
        },
        {
            "text": "k8s 1.32 패키지 저장소 등록 및 kubelet, kubeadm, kubectl 설치 (master, worker)",
            "description": "Kubernetes 1.32 버전을 위한 APT 저장소를 등록하고, kubelet, kubeadm, kubectl 패키지를 설치합니다. 설치된 패키지의 버전이 고정되도록 설정하여 의도치 않은 업데이트를 방지합니다.",
            "command": "curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo tee /etc/apt/keyrings/kubernetes-apt-keyring.asc\necho \"deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\nsudo apt update\nsudo apt install -y kubelet kubeadm kubectl\nsudo apt-mark hold kubelet kubeadm kubectl"
        },
        {
            "text": "IP Forwarding 활성화 (master, worker)",
            "description": "네트워크 트래픽 포워딩을 활성화하여 Pod 간 통신이 가능하도록 설정합니다.",
            "command": "echo \"net.ipv4.ip_forward = 1\" | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\ncat /proc/sys/net/ipv4/ip_forward"
        },
        {
            "text": "/etc/hosts 및 DNS 설정 (master)",
            "description": "마스터 노드에서 API 서버 엔드포인트에 대한 로컬 호스트 매핑을 추가하고, 외부 DNS에 API 서버 엔드포인트에 대한 A 레코드를 추가합니다. <YOUR_API_SERVER_ENDPOINT>와 <YOUR_CONTROL_PLANE_IP>를 실제 환경에 맞게 변경하십시오.",
            "code": "# /etc/hosts 파일에 추가\n127.0.0.1 localhost <YOUR_API_SERVER_ENDPOINT>\n\n# 외부 DNS (예: Azure DNS)에 A 레코드 추가\n<YOUR_API_SERVER_ENDPOINT> <-> <YOUR_CONTROL_PLANE_IP>"
        },
        {
            "text": "kubeadm 초기화 (master)",
            "description": "Kubernetes 클러스터의 마스터 노드를 초기화합니다. --pod-network-cidr, --cri-socket, --control-plane-endpoint, --apiserver-cert-extra-sans 옵션을 환경에 맞게 설정합니다. <YOUR_API_SERVER_ENDPOINT>, <YOUR_CONTROL_PLANE_IP>를 실제 값으로 대체하십시오.",
            "command": "sudo kubeadm init \\\n  --pod-network-cidr=10.244.0.0/16 \\\n  --cri-socket=unix:///run/containerd/containerd.sock \\\n  --control-plane-endpoint=<YOUR_API_SERVER_ENDPOINT> \\\n  --apiserver-cert-extra-sans=<YOUR_API_SERVER_ENDPOINT>,127.0.0.1,<YOUR_CONTROL_PLANE_IP> \\\n  --upload-certs"
        },
        {
            "text": "kubeconfig 복사 (master)",
            "description": "Kubernetes 클러스터에 접근하기 위한 설정 파일을 사용자 홈 디렉토리로 복사하고 권한을 설정합니다.",
            "command": "mkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config"
        },
        {
            "text": "kubeadm 설치 확인 (master)",
            "description": "kubeadm 설치가 성공적으로 완료되었는지 확인합니다.",
            "command": "echo $KUBECONFIG\nkubectl auth can-i get pods"
        },
        {
            "text": "Calico 설치 (master)",
            "description": "Kubernetes 클러스터의 네트워크 플러그인으로 Calico를 설치합니다. `calico.yaml` 파일을 다운로드하고, `CALICO_IPV4POOL_CIDR` 값을 `kubeadm init` 시 지정한 `--pod-network-cidr`와 일치하도록 수정합니다. 필요에 따라 `IP_AUTODETECTION_METHOD` 및 VXLAN 설정을 조정할 수 있습니다.",
            "code": "curl -O https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/calico.yaml\n# calico.yaml 파일 수정 (예시)\n# - name: CALICO_IPV4POOL_CIDR\n#   value: \"10.244.0.0/16\"\n# - name: CALICO_IPV4POOL_IPIP\n#   value: \"Never\"\n# - name: CALICO_IPV4POOL_VXLAN\n#   value: \"Always\"\n# calico_backend: \"bird\"\n\nkubectl apply -f calico.yaml"
        },
        {
            "text": "Kubernetes 서비스 확인 (master)",
            "description": "모든 Pod와 노드가 `Ready` 상태인지 확인하고, 클러스터 정보가 올바르게 표시되는지 확인합니다.",
            "command": "kubectl get pods -n kube-system\nkubectl get nodes\nkubectl cluster-info"
        },
        {
            "text": "k9s 설치 (master, worker - 선택 사항)",
            "description": "Kubernetes 클러스터를 관리하기 위한 터미널 UI 도구인 k9s를 설치합니다.",
            "command": "mkdir ~/k9s-install && cd ~/k9s-install\nwget https://github.com/derailed/k9s/releases/download/v0.40.5/k9s_Linux_amd64.tar.gz\ntar -zxvf k9s_Linux_amd64.tar.gz\nsudo mv k9s /usr/local/bin\nsudo chmod +x /usr/local/bin/k9s"
        },
        {
            "text": "kubectl alias 설정 (master, worker - 선택 사항)",
            "description": "`kubectl` 명령어를 `k`로 단축하여 사용할 수 있도록 alias를 설정합니다.",
            "command": "echo 'alias k=kubectl' >> ~/.bashrc && source ~/.bashrc"
        },
        {
            "text": "마스터 노드 Taint 제거 (master)",
            "description": "마스터 노드에도 Pod가 배포될 수 있도록 Taint를 제거합니다. <YOUR_MASTER_NODE_NAME>을 실제 마스터 노드 이름으로 대체하십시오.",
            "command": "kubectl taint nodes <YOUR_MASTER_NODE_NAME> node-role.kubernetes.io/control-plane:NoSchedule-"
        },
        {
            "text": "kubelet 안정화 설정 (master, worker)",
            "description": "KubeVirt/kubelet 안정성을 위한 Inotify 제한을 설정합니다.",
            "command": "sudo tee -a /etc/sysctl.conf <<EOF\n# Inotify limits for KubeVirt/kubelet stability\nfs.inotify.max_queued_events=32768\nfs.inotify.max_user_instances=256\nfs.inotify.max_user_watches=1048576\nEOF\nsudo sysctl -p"
        }
    ]
}